/*
  * highlight
  ! alert
  ? query
  TODO: Things to do
*/

const snapShot = { tree: null };

const mode = {
  jumping: false,
  paused: false,
  locked: false,
};

//* Both of these files export a function. This pattern invokes those functions with the specified arguments.
const linkFiber = require('./linkFiber')(snapShot, mode);
const timeJump = require('./timeJump')(snapShot, mode);

function getRouteURL(node) {
  //* This function is called when the user does time travel. The node is the same thing as the payload for the addEventListener method
  
  //! console.log(node, 'getRouteURL node')

  //* Node name is App by default
  //? If the app uses React Router, then the name will be Router. Does React Router automatically add a key to the state called location that is an object?
  if (node.name === 'Router') {
    return node.state.location.pathname;
  }
  //? What exactly is node children?
  if (node.children && node.children.length >= 1) {
    const tempNode = node.children;
    for (let index = 0; index < tempNode.length; index += 1) {
      return getRouteURL(tempNode[index]);
    }
  }
}

window.addEventListener('message', ({ data: { action, payload } }) => { // runs automatically twice per second with inspectedElement
  //! console.log(action,'space ', payload, 'message event listener action and payload')
 
  //? Why does this fire when the app first loads even though there is no action? Can this be optimized?
  //* Actions: recordSnap happens when a button is clicked. It is an object with a children key that has an array. It's an array of objects that include all key value pairs in the state. 
  //* jumpToSnap happens when the user drags the nav bar. The state in the array is the one we want to change to. 
  
  switch (action) {
    case 'jumpToSnap':
      //? Time jump changes the state throughout the entire tree
      timeJump(payload);
      // Get the pathname from payload and add new entry to browser history
      // MORE: https://developer.mozilla.org/en-US/docs/Web/API/History/pushState
      //? Changes the browser URL
      window.history.pushState('', '', getRouteURL(payload));
      break;
    case 'setLock':
      //* This and set pause take the event that the frontend sends and use it to set the mode object in this file that determines the state. 
      //? Should we use state here instead of just an object. 
      mode.locked = payload;
      break;
    case 'setPause':
      mode.paused = payload;
      break;
    default:
      break;
  }
});

module.exports = linkFiber;
